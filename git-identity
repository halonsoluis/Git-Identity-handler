#!/bin/bash
#
# git-identity - A wrapper script for git that allows selecting between work and personal identities
#
# Usage: git-identity [git commands and options]
#
# Example: git-identity clone git@github.com:username/repo.git
#          git-identity push origin main
#
# Author: Hugo Alonso Luis

set -e

# Function to display usage information
function show_usage() {
  echo "git-identity - A wrapper script for git that allows selecting between work and personal identities"
  echo
  echo "Usage: git-identity [git commands and options]"
  echo
  echo "Examples:"
  echo "  git-identity clone git@github.com:username/repo.git"
  echo "  git-identity push origin main"
  echo
  echo "This script will prompt you to select which identity to use and then pass all arguments to git."
  echo
}

# Function to test SSH connection
function test_ssh_connection() {
  local host=$1
  echo "Testing SSH connection to $host..."
  if ssh -T -o ConnectTimeout=10 "$host" 2>&1 | grep -q "successfully authenticated"; then
    echo "✓ SSH connection successful"
    return 0
  else
    echo "✗ SSH connection failed"
    echo "Debug: Running ssh -T $host"
    ssh -T "$host"
    return 1
  fi
}

# Function to select identity
function select_identity() {
  echo "Select GitHub identity to use:"
  echo "1) Work (default ~/.ssh/id_rsa)"
  echo "2) Personal (github-personal using ~/.ssh/id_rsa_personal)"
  read -p "Enter choice [1-2]: " choice

  case $choice in
    1)
      echo "Using work identity (default)"
      # Test connection with default settings
      if ! test_ssh_connection "git@github.com"; then
        echo "Warning: SSH connection test failed for work identity"
        read -p "Continue anyway? [y/N]: " continue_choice
        if [[ "$continue_choice" != "y" && "$continue_choice" != "Y" ]]; then
          exit 1
        fi
      fi
      ;;
    2)
      echo "Using personal identity (github-personal)"
      
      # Test connection with personal identity
      if ! test_ssh_connection "git@github-personal"; then
        echo "Warning: SSH connection test failed for personal identity"
        echo "Make sure your ~/.ssh/config has an entry like:"
        echo ""
        echo "Host github-personal"
        echo "    HostName github.com"
        echo "    User git"
        echo "    IdentityFile ~/.ssh/id_rsa_personal"
        echo "    IdentitiesOnly yes"
        echo ""
        read -p "Continue anyway? [y/N]: " continue_choice
        if [[ "$continue_choice" != "y" && "$continue_choice" != "Y" ]]; then
          exit 1
        fi
      fi
      
      # Set SSH command to use config file explicitly
      export GIT_SSH_COMMAND="ssh -F ~/.ssh/config"
      
      # Replace all github.com references with github-personal
      local modified=false
      for arg in "$@"; do
        if [[ "$arg" == *"github.com"* ]]; then
          echo "Replacing github.com with github-personal in URL: $arg"
          modified=true
        fi
      done
      
      if $modified; then
        # Replace all github.com with github-personal in command line arguments
        local new_args=()
        for arg in "$@"; do
          new_args+=("${arg//github.com/github-personal}")
        done
        # Update the global arguments
        set -- "${new_args[@]}"
        echo "Modified command will be: git $*"
      fi
      ;;
    *)
      echo "Invalid choice. Using work identity (default)."
      ;;
  esac
  
  return 0
}

# Function to debug SSH setup
function debug_ssh() {
  echo "=== SSH Debug Information ==="
  echo
  
  # Check SSH directory
  echo "SSH directory (~/.ssh/):"
  if [[ -d ~/.ssh ]]; then
    echo "✓ ~/.ssh directory exists"
    echo "Permissions: $(ls -ld ~/.ssh | awk '{print $1}')"
  else
    echo "✗ ~/.ssh directory does not exist"
    return 1
  fi
  
  echo
  echo "SSH config file (~/.ssh/config):"
  if [[ -f ~/.ssh/config ]]; then
    echo "✓ ~/.ssh/config exists"
    echo "Permissions: $(ls -l ~/.ssh/config | awk '{print $1}')"
    echo
    echo "--- ~/.ssh/config contents (github-related) ---"
    if grep -i "github" ~/.ssh/config >/dev/null 2>&1; then
      grep -A 5 -B 1 -i "host.*github" ~/.ssh/config
    else
      echo "No github entries found in config"
    fi
  else
    echo "✗ ~/.ssh/config does not exist"
  fi
  
  echo
  echo "SSH keys in ~/.ssh/:"
  if ls ~/.ssh/id_* >/dev/null 2>&1; then
    ls -la ~/.ssh/id_* | while read line; do
      if [[ "$line" == *".pub" ]]; then
        echo "  Public:  $line"
      else
        echo "  Private: $line"
      fi
    done
  else
    echo "No SSH keys found (id_* pattern)"
  fi
  
  echo
  echo "SSH agent status:"
  if ssh-add -l >/dev/null 2>&1; then
    echo "✓ SSH agent is running with keys:"
    ssh-add -l | sed 's/^/  /'
  else
    case $? in
      1) echo "✗ SSH agent is running but has no keys loaded" ;;
      2) echo "✗ SSH agent is not running" ;;
      *) echo "✗ Unknown SSH agent status" ;;
    esac
  fi
  
  echo
  echo "Testing SSH connections:"
  echo -n "  github.com: "
  if timeout 10 ssh -T -o ConnectTimeout=5 -o BatchMode=yes git@github.com 2>&1 | grep -q "successfully authenticated"; then
    echo "✓ Connected"
  else
    echo "✗ Failed"
  fi
  
  echo -n "  github-personal: "
  if timeout 10 ssh -T -o ConnectTimeout=5 -o BatchMode=yes git@github-personal 2>&1 | grep -q "successfully authenticated"; then
    echo "✓ Connected"
  else
    echo "✗ Failed (check if github-personal is configured in ~/.ssh/config)"
  fi
}

# Handle special arguments first
case "$1" in
  "-h"|"--help")
    show_usage
    exit 0
    ;;
  "--debug")
    debug_ssh
    exit 0
    ;;
esac

# Check if git is installed
if ! command -v git &> /dev/null; then
  echo "Error: git is not installed or not in PATH"
  exit 1
fi

# Check if no arguments provided
if [[ $# -eq 0 ]]; then
  echo "Error: No git commands provided"
  show_usage
  exit 1
fi

# Store original arguments for debugging
original_args=("$@")

# Select identity and potentially modify arguments
select_identity "$@"

# Execute git with the selected identity and all provided arguments
echo "Executing: git $*"
if ! git "$@"; then
  echo ""
  echo "=== Git command failed. Debug information: ==="
  echo "Original command: git ${original_args[*]}"
  echo "Modified command: git $*"
  echo "GIT_SSH_COMMAND: ${GIT_SSH_COMMAND:-not set}"
  echo ""
  echo "Run 'git-identity --debug' for SSH configuration details"
  exit 1
fi